{"version":3,"file":"src_App_tsx.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;;AAOA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;;AAEA;;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;ACPA;AAEA;AACA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AACA;AACA","sources":["webpack://happybirthday/./src/App.tsx","webpack://happybirthday/./src/Executives/CalculateBoxSize.tsx","webpack://happybirthday/./src/Executives/GenerateColors.tsx"],"sourcesContent":["import React, { useEffect, useState, lazy, useRef } from \"react\";\r\nimport { Color } from \"./Types/GeneralTypes\";\r\nimport {generateColors} from \"./Executives/GenerateColors\"\r\nimport {calculateBoxSize} from \"./Executives/CalculateBoxSize\"\r\n\r\nconst ColorBox = lazy(() => import(\"./Shared-Components/ColorBox\"));\r\n\r\ninterface CanvasDimantions {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nfunction App(): React.ReactElement {\r\n  const [colors, setColors] = useState<Color[] | null>(null);\r\n  const [canvasSize, setCanvasSize] = useState<CanvasDimantions>({\r\n    width: 0,\r\n    height: 0,\r\n  });\r\n  const containerQuery = useRef<HTMLDivElement>(null);\r\n\r\n  // To correctly calculate the size of each box you have to first calculate the surfacer of the canvas then divide it by the number of boxes.\r\n  // So it will be 2c*2c=4c and to fit 6 box in this canvas you have to 4/6=0.666. So the width and height for a perfect rect will be 0.666/2.\r\n  useEffect(() => {\r\n    setColors(generateColors());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let canvasWidth: number = 0;\r\n    let canvasHeight: number = 0;\r\n    if (colors && containerQuery.current) {\r\n      canvasWidth = containerQuery.current.clientWidth;\r\n      canvasHeight = containerQuery.current.clientHeight;\r\n    }\r\n\r\n    const args = {\r\n      width: canvasWidth,\r\n      height: canvasHeight,\r\n      cellNumber: 32768,\r\n    };\r\n    setCanvasSize(calculateBoxSize(args));\r\n  }, [containerQuery.current]);\r\n  \r\n  return (\r\n    <div className=\"container\" ref={containerQuery}>\r\n      {canvasSize.width && (\r\n      colors?.map((color: Color, index) => {\r\n        const props = { ...color, ...canvasSize };\r\n        return <ColorBox key={index} {...props} />;\r\n      }))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","interface Props {\r\n  width: number;\r\n  height: number;\r\n  cellNumber: number;\r\n}\r\nexport const calculateBoxSize = ({ width, height, cellNumber }: Props) => {\r\n  const w = (width / cellNumber) / 2;\r\n  const h = (height / cellNumber) / 2;\r\n  return {width: w*100, height: h*100};\r\n};\r\n\r\n","import { Color } from \"../Types/GeneralTypes\";\r\n\r\nlet colors: Color[] = [];\r\n\r\nexport const generateColors = () => {\r\n  const increment = Math.round(255 / 32);\r\n  for (let r = 0; r < 255; r += increment) {\r\n    for (let g = 0; g < 255; g += increment) {\r\n      for (let b = 0; b < 255; b += increment) {\r\n        const color = { red:  Math.round(r), green: Math.round(g), blue: Math.round(b) };\r\n        colors.push(color);\r\n      }\r\n    }\r\n  }\r\n  return colors;\r\n};\r\n\r\n"],"names":[],"sourceRoot":""}