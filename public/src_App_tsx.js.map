{"version":3,"file":"src_App_tsx.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1BA;;AAEA;;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AADA;AAQA;;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;;AAGA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;;AAEA;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA","sources":["webpack://happybirthday/./JSsrc/ColorGenerator.js","webpack://happybirthday/./src/App.tsx","webpack://happybirthday/./src/Executives/CalculateBoxSize.tsx"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ColorGenerator = void 0;\r\nclass ColorGenerator {\r\n    constructor(props) {\r\n        this.calculateCellSize = () => {\r\n            return `size=${this.dimensions.width}x${this.dimensions.height}`;\r\n        };\r\n        this.constructColor = () => {\r\n            const increment = Math.round(255 / 32);\r\n            for (let r = 0; r < 255; r += increment) {\r\n                for (let g = 0; g < 255; g += increment) {\r\n                    for (let b = 0; b < 255; b += increment) {\r\n                        const color = { red: Math.floor(r), green: g, blue: Math.round(b) };\r\n                        this.color.push(color);\r\n                    }\r\n                }\r\n            }\r\n            return this.color;\r\n        };\r\n        this.dimensions = props.dimensions;\r\n        this.color = [];\r\n    }\r\n}\r\nexports.ColorGenerator = ColorGenerator;\r\nmodule.exports.ColorGenerator = ColorGenerator;\r\n//# sourceMappingURL=ColorGenerator.js.map","import React, { useEffect, useState, lazy, useRef } from \"react\";\r\nimport { Color } from \"./Types/GeneralTypes\";\r\nconst GenerateColor = require(\"../JSsrc/ColorGenerator\").ColorGenerator;\r\nconst calculateBoxSize = require(\"./Executives/CalculateBoxSize\").calculateBoxSize;\r\n\r\nconst ColorBox = lazy(() => import(\"./Shared-Components/ColorBox\"));\r\n\r\ninterface CanvasDimantions {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nfunction App(): React.ReactElement {\r\n  const [colors, setColors] = useState<Color[] | null>(null);\r\n  const [canvasSize, setCanvasSize] = useState<CanvasDimantions>({\r\n    width: 0,\r\n    height: 0,\r\n  });\r\n  const containerQuery = useRef<HTMLDivElement>(null);\r\n  const args = {\r\n    dimensions: {\r\n      width: 1920,\r\n      height: 933,\r\n    },\r\n  };\r\n\r\n  // To correctly calculate the size of each box you have to first calculate the surfacer of the canvas then divide it by the number of boxes.\r\n  // So it will be 2c*2c=4c and to fit 6 box in this canvas you have to 4/6=0.666. So the width and height for a perfect rect will be 0.666/2.\r\n  useEffect(() => {\r\n    setColors(new GenerateColor(args).constructColor());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let canvasWidth: number = 0;\r\n    let canvasHeight: number = 0;\r\n    if (colors && containerQuery.current) {\r\n      canvasWidth = containerQuery.current.clientWidth;\r\n      canvasHeight = containerQuery.current.clientHeight;\r\n    }\r\n    console.log(canvasWidth, canvasHeight);\r\n    \r\n    const args = {\r\n      width: canvasWidth,\r\n      height: canvasHeight,\r\n      cellNumber: 32768,\r\n    };\r\n    setCanvasSize(calculateBoxSize(args));\r\n  }, [containerQuery.current]);\r\n  // console.log(canvasSize);\r\n  \r\n  return (\r\n    <div className=\"container\" ref={containerQuery}>\r\n      {canvasSize.width && (\r\n      colors?.map((color: Color, index) => {\r\n        const props = { ...color, ...canvasSize };\r\n        return <ColorBox key={index} {...props} />;\r\n      }))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","interface Props {\r\n  width: number;\r\n  height: number;\r\n  cellNumber: number;\r\n}\r\nconst calculateBoxSize = ({ width, height, cellNumber }: Props) => {\r\n  const w = (width / cellNumber) / 2;\r\n  const h = (height / cellNumber) / 2;\r\n  return {width: w, height: h};\r\n};\r\n\r\nmodule.exports.calculateBoxSize = calculateBoxSize;\r\n"],"names":[],"sourceRoot":""}