{"version":3,"file":"src_App_tsx.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;;AAEA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;;AAEA","sources":["webpack://happybirthday/./JSsrc/ColorGenerator.js","webpack://happybirthday/./src/App.tsx"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ColorGenerator = void 0;\r\nclass ColorGenerator {\r\n    constructor(props) {\r\n        this.calculateCellSize = () => {\r\n            return `size=${this.dimensions.width}x${this.dimensions.height}`;\r\n        };\r\n        this.constructColor = () => {\r\n            const increment = Math.round(255 / 32);\r\n            for (let r = 0; r < 255; r += increment) {\r\n                for (let g = 0; g < 255; g += increment) {\r\n                    for (let b = 0; b < 255; b += increment) {\r\n                        const color = { red: Math.floor(r), green: g, blue: Math.round(b) };\r\n                        this.color.push(color);\r\n                    }\r\n                }\r\n            }\r\n            return this.color;\r\n        };\r\n        this.dimensions = props.dimensions;\r\n        this.color = [];\r\n    }\r\n}\r\nexports.ColorGenerator = ColorGenerator;\r\nmodule.exports.ColorGenerator = ColorGenerator;\r\n//# sourceMappingURL=ColorGenerator.js.map","import React, {useEffect, useState, lazy} from \"react\";\r\nimport {Color} from \"./Types/GeneralTypes\";\r\nconst GenerateColor = require(\"../JSsrc/ColorGenerator\").ColorGenerator;\r\n\r\n// const ColorBox=lazy(()=>import(\"./Shared-Components/ColorBox\"))\r\n\r\nfunction App(): React.ReactElement {\r\n  const [colors, setColors]=useState<Color[] | null>(null);\r\n  const args = {\r\n    dimensions: {\r\n      width: 1920,\r\n      height: 933,\r\n    },\r\n  };\r\n  useEffect(()=>{\r\n    setColors(new GenerateColor(args).constructColor());\r\n  }, [])\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      {colors?.map((color: Color, index)=>{\r\n        return <span key={index} className=\"container_colorBox\" style={{backgroundColor: `rgba(${color.red}, ${color.green}, ${color.blue}, 1)`}}/>\r\n        // return <ColorBox key={index} {...colors}/>\r\n        // return <div key={index} style={{backgroundColor: `rgba(${color.red}, ${color.green}, ${color.blue}, 1)`}} />\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":[],"sourceRoot":""}